// import React, { useEffect } from "react";
// import { Tabs, Form, Input, Button, message } from "antd";
// import { useDispatch, useSelector } from "react-redux";
// import {
//   login,
//   register,
//   clearMessage,
// } from "../../reduxToolKist/auth/authSlice";
// import { useNavigate } from "react-router-dom";
// import axios from "axios";
// import FormItem from "antd/es/form/FormItem";

// const { TabPane } = Tabs;

// const AuthForm = () => {
//   const dispatch = useDispatch();
//   const navigate = useNavigate();
//   const { loading, error, success, token } = useSelector((state) => state.auth);

//   const [loginForm] = Form.useForm();
//   const [registerForm] = Form.useForm();
//   const [forgotForm] = Form.useForm();

//   // Khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng ‚Üí ƒëi·ªÅu h∆∞·ªõng
//   useEffect(() => {
//     if (token) {
//       navigate("/services");
//     }
//   }, [token, navigate]);

//   // Hi·ªÉn th·ªã message
//   useEffect(() => {
//     if (error) {
//       console.log("‚ùå error t·ª´ redux:", error); // ‚úÖ TH√äM LOG
//       const errorMsg =
//         typeof error === "string"
//           ? error
//           : error.message ||
//             "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i . Vui long ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u ho·∫∑c t√™n ƒëang nh·∫≠p!";
//       message.error(errorMsg);
//       dispatch(clearMessage());
//     }

//     if (success) {
//       message.success(success.toString());
//       dispatch(clearMessage());
//       loginForm.resetFields();
//       registerForm.resetFields();
//     }
//   }, [error, success, dispatch, loginForm, registerForm]);

//   const onLogin = (values) => {
//     dispatch(login(values));
//   };

//   // const onRegister = (values) => {
//   //   dispatch(register(values));
//   // };
//   const onRegister = (values) => {
//     const dataWithFullName = {
//       ...values,
//       fullName: values.username, // ‚úÖ T·ª± ƒë·ªông g√°n fullName
//     };
//     dispatch(register(dataWithFullName));
//   };

//   const onForgotPassword = async (values) => {
//     try {
//       const response = await axios.post(
//         `http://localhost:8181/api/auth/forgot-password?email=${values.email}`
//       );

//       message.success("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ g·ª≠i ƒë·∫øn email!");
//       forgotForm.resetFields();
//     } catch (err) {
//       message.error(
//         err?.response?.data || "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"
//       );
//     }
//   };

//   return (
//     <div
//       style={{
//         maxWidth: 400,
//         margin: "auto",
//         padding: "2rem",
//         marginTop: "5vh",
//       }}
//     >
//       <Tabs defaultActiveKey="1" centered>
//         <TabPane tab="ƒêƒÉng nh·∫≠p" key="1">
//           <Form form={loginForm} layout="vertical" onFinish={onLogin}>
//             <Form.Item
//               label="T√™n ƒëƒÉng nh·∫≠p"
//               name="username"
//               rules={[
//                 { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" },
//               ]}
//             >
//               <Input placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
//             </Form.Item>
//             <Form.Item
//               label="M·∫≠t kh·∫©u"
//               name="passwordHashed"
//               rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
//             >
//               <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
//             </Form.Item>
//             <Form.Item>
//               <Button type="primary" htmlType="submit" block loading={loading}>
//                 ƒêƒÉng nh·∫≠p
//               </Button>
//             </Form.Item>
//           </Form>
//         </TabPane>

//         <TabPane tab="ƒêƒÉng k√Ω" key="2">
//           <Form form={registerForm} layout="vertical" onFinish={onRegister}>
//             <Form.Item
//               label="T√™n ƒëƒÉng nh·∫≠p"
//               name="username"
//               rules={[
//                 { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" },
//               ]}
//             >
//               <Input placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
//             </Form.Item>

//             <Form.Item
//               label="S·ªë ƒëi·ªán tho·∫°i"
//               name="phoneNumber"
//               rules={[
//                 { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
//                 {
//                   pattern: /^\d{9,11}$/,
//                   message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
//                 },
//               ]}
//             >
//               <Input placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" />
//             </Form.Item>

//             <Form.Item
//               label="Email"
//               name="email"
//               rules={[
//                 { required: true, message: "Vui l√≤ng nh·∫≠p email" },
//                 { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
//               ]}
//             >
//               <Input placeholder="Nh·∫≠p email" />
//             </Form.Item>

//             <Form.Item
//               label="M·∫≠t kh·∫©u"
//               name="passwordHashed"
//               rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
//             >
//               <Input.Password placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
//             </Form.Item>
//             <Form.Item>
//               <Button type="primary" htmlType="submit" block loading={loading}>
//                 ƒêƒÉng k√Ω
//               </Button>
//             </Form.Item>
//           </Form>
//         </TabPane>

//         {/* qu√™n m·∫≠t kh·∫©u */}
//         <TabPane tab="Qu√™n m·∫≠t kh·∫©u" key="3">
//           <Form form={forgotForm} layout="vertical" onFinish={onForgotPassword}>
//             <Form.Item
//               label="Email / T√™n ƒëang nh·∫≠p"
//               name="email"
//               rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p Email" }]}
//             >
//               <input placeholder="Nh·∫≠p Email ƒë√£ ƒëƒÉng k√≠" />
//             </Form.Item>

//             <FormItem>
//               <Button type="primary" htmlType="submit" block>
//                 G·ª≠i y√™u c·∫ßu ƒë√£ ƒë·∫∑t m·∫≠t kh·∫©u{" "}
//               </Button>
//             </FormItem>
//           </Form>
//         </TabPane>
//       </Tabs>
//     </div>
//   );
// };

// export default AuthForm;

/// b·∫£n ƒë√£ style

import React, { useEffect, useState } from "react";
import {
  Tabs,
  Form,
  Input,
  Button,
  message,
  Typography,
  Card,
  Modal,
} from "antd";
import { useDispatch, useSelector } from "react-redux";
import {
  login,
  register,
  clearMessage,
} from "../../reduxToolKist/auth/authSlice";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import {
  UserOutlined,
  LockOutlined,
  MailOutlined,
  PhoneOutlined,
} from "@ant-design/icons";

const { TabPane } = Tabs;
const { Title, Link } = Typography;

const AuthForm = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const { loading, error, success, token } = useSelector((state) => state.auth);

  const [loginForm] = Form.useForm();
  const [registerForm] = Form.useForm();
  const [forgotForm] = Form.useForm();

  const [forgotVisible, setForgotVisible] = useState(false);

  const roles = useSelector((state) => state.auth.roles || []);

  useEffect(() => {
    if (token) {
      // console.log("üîê Token:", token);
      // console.log("üîê Roles:", roles);

      if (roles.includes("ROLE_ADMIN")) {
        navigate("/admin");
      } else {
        navigate("/services"); // ho·∫∑c trang ng∆∞·ªùi d√πng b√¨nh th∆∞·ªùng
      }
    }
  }, [token, roles, navigate]);

  useEffect(() => {
    if (error) {
      // console.log("‚ùå error t·ª´ redux:", error);
      const errorMsg =
        typeof error === "string"
          ? error
          : error.message || "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!";
      message.error(errorMsg);
      dispatch(clearMessage());
    }

    if (success) {
      message.success(success.toString());
      dispatch(clearMessage());
      loginForm.resetFields();
      registerForm.resetFields();
    }
  }, [error, success, dispatch, loginForm, registerForm]);

  const onLogin = (values) => {
    dispatch(login(values));
  };

  const onRegister = (values) => {
    const dataWithFullName = {
      ...values,
      fullName: values.username,
    };
    dispatch(register(dataWithFullName));
  };

  const onForgotPassword = async (values) => {
    try {
      await axios.post(
        `http://localhost:8181/api/auth/forgot-password?email=${values.email}`
      );
      message.success("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email!");
      forgotForm.resetFields();
      setForgotVisible(false);
    } catch (err) {
      message.error(
        err?.response?.data || "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u"
      );
    }
  };

  return (
    <div
      style={{
        minHeight: "100vh",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        background: "#f5f5f5",
      }}
    >
      <Card
        bordered={false}
        style={{
          width: "100%",
          maxWidth: 420,
          boxShadow: "0 8px 24px rgba(0, 0, 0, 0.1)",
          borderRadius: "12px",
          backgroundColor: "#fff",
          padding: 24,
        }}
      >
        <Title level={3} style={{ textAlign: "center", marginBottom: 20 }}>
          Ch√†o m·ª´ng b·∫°n
        </Title>
        <Tabs defaultActiveKey="1" centered>
          <TabPane tab="ƒêƒÉng nh·∫≠p" key="1">
            <Form form={loginForm} layout="vertical" onFinish={onLogin}>
              <Form.Item
                name="username"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" },
                ]}
              >
                <Input
                  prefix={<UserOutlined />}
                  placeholder="T√™n ƒëƒÉng nh·∫≠p"
                  size="large"
                />
              </Form.Item>
              <Form.Item
                name="passwordHashed"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
              >
                <Input.Password
                  prefix={<LockOutlined />}
                  placeholder="M·∫≠t kh·∫©u"
                  size="large"
                />
              </Form.Item>
              <Form.Item>
                <Button
                  type="primary"
                  htmlType="submit"
                  block
                  loading={loading}
                  size="large"
                  shape="round"
                >
                  ƒêƒÉng nh·∫≠p
                </Button>
              </Form.Item>
              <div style={{ textAlign: "center" }}>
                <Link onClick={() => setForgotVisible(true)}>
                  Qu√™n m·∫≠t kh·∫©u?
                </Link>
              </div>
            </Form>
          </TabPane>

          <TabPane tab="ƒêƒÉng k√Ω" key="2">
            <Form form={registerForm} layout="vertical" onFinish={onRegister}>
              <Form.Item
                name="username"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" },
                ]}
              >
                <Input
                  prefix={<UserOutlined />}
                  placeholder="T√™n ƒëƒÉng nh·∫≠p"
                  size="large"
                />
              </Form.Item>

              <Form.Item
                name="phoneNumber"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" },
                  {
                    pattern: /^\d{9,11}$/,
                    message: "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá",
                  },
                ]}
              >
                <Input
                  prefix={<PhoneOutlined />}
                  placeholder="S·ªë ƒëi·ªán tho·∫°i"
                  size="large"
                />
              </Form.Item>

              <Form.Item
                name="email"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p email" },
                  { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
                ]}
              >
                <Input
                  prefix={<MailOutlined />}
                  placeholder="Email"
                  size="large"
                />
              </Form.Item>

              <Form.Item
                name="passwordHashed"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u" }]}
              >
                <Input.Password
                  prefix={<LockOutlined />}
                  placeholder="M·∫≠t kh·∫©u"
                  size="large"
                />
              </Form.Item>

              <Form.Item>
                <Button
                  type="primary"
                  htmlType="submit"
                  block
                  loading={loading}
                  size="large"
                  shape="round"
                >
                  ƒêƒÉng k√Ω
                </Button>
              </Form.Item>
            </Form>
          </TabPane>
        </Tabs>
      </Card>

      {/* ‚úÖ Modal qu√™n m·∫≠t kh·∫©u */}
      <Modal
        title="Qu√™n m·∫≠t kh·∫©u"
        open={forgotVisible}
        onCancel={() => setForgotVisible(false)}
        footer={null}
      >
        <Form form={forgotForm} layout="vertical" onFinish={onForgotPassword}>
          <Form.Item
            label="Email"
            name="email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p Email ƒë√£ ƒëƒÉng k√Ω" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
            ]}
          >
            <Input placeholder="Nh·∫≠p email" />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit" block>
              G·ª≠i y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AuthForm;
