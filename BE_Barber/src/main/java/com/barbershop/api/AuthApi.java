package com.barbershop.api;

import com.barbershop.config.security.JwtUtils;
import com.barbershop.domain.*;
import com.barbershop.exception.BarberException;
import com.barbershop.model.UserAdapter;
import com.barbershop.model.request.RegisterRequest;
import com.barbershop.model.request.ResetPasswordRequest;
import com.barbershop.model.request.TokenRequest;
import com.barbershop.model.response.CustomerResponse;
import com.barbershop.model.response.TokenResponse;
import com.barbershop.repository.CustomerRepository;
import com.barbershop.repository.RoleRepository;
import com.barbershop.repository.UserRepository;
import com.barbershop.service.EmailService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.ObjectProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/auth")
@RequiredArgsConstructor
@CrossOrigin("*")
public class AuthApi {
    @Autowired
    private JwtUtils jwtUtils;
    @Autowired
    private AuthenticationManager authenticationManager;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private PasswordEncoder passwordEncoder;
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private CustomerRepository customerRepository;

    private Logger logger = LoggerFactory.getLogger(AuthApi.class);

    @Autowired
    private EmailService emailService;

    @PostMapping("/token")
    public ResponseEntity<?> getToken(@RequestBody TokenRequest request) {
        try {
            Authentication authentication = authenticationManager
                    .authenticate(new UsernamePasswordAuthenticationToken(request.getUsername(), request.getPasswordHashed()));
            SecurityContextHolder.getContext().setAuthentication(authentication);
            UserAdapter userAdapter = (UserAdapter) authentication.getPrincipal();
            List<String> roles = userAdapter.getAuthorities().stream()
                    .map(auth -> auth.getAuthority())
                    .toList();

            String token = jwtUtils.generateToken(userAdapter.getUsername(), roles);
            TokenResponse tokenResponse = new TokenResponse();
            tokenResponse.setToken(token);
            tokenResponse.setExpired(new Date().getTime() + jwtUtils.getExpiration());
            return new ResponseEntity<>(tokenResponse, HttpStatus.OK);

        } catch (BadCredentialsException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u");

        } catch (Exception e) {
            logger.error("getToken error", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("L·ªói h·ªá th·ªëng khi ƒëƒÉng k√Ω");
        }
    }

//    // l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
//    @GetMapping("/profile")
//    public ResponseEntity<?> getProfile(@AuthenticationPrincipal UserAdapter userDetails) {
//        if (userDetails == null) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User not authenticated");
//        }
//
//        String username = userDetails.getUsername();
//        List<String> roles = userDetails.getAuthorities().stream()
//                .map(GrantedAuthority::getAuthority)
//                .collect(Collectors.toList());
//        System.out.println("üí° ROLES in profile API: " + roles);
//        return ResponseEntity.ok(new ProfileResponse(username, roles));
//    }
//
//    // DTO tr·∫£ v·ªÅ client, Java 16+ record
//    record ProfileResponse(String username, List<String> roles) {
//    }

    @GetMapping("/profile")
    public ResponseEntity<?> getProfile(@AuthenticationPrincipal UserAdapter userDetails) {
        if (userDetails == null) {
            System.out.println("‚ùå Kh√¥ng c√≥ userDetails (ch∆∞a ƒëƒÉng nh·∫≠p)");
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("User not authenticated");
        }

        UserEntity user = userDetails.getUser(); // üëâ l·ªói ·ªü ƒë√¢y n·∫øu userDetails.getUser() ch∆∞a c√≥ method
        if (user == null) {
            System.out.println("‚ùå userDetails.getUser() tr·∫£ v·ªÅ null");
        } else {
            System.out.println("‚úÖ UserEntity ID: " + user.getId());
            System.out.println("‚úÖ Username: " + user.getUsername());
        }

        Customer customer = user.getCustomer(); // üëâ ki·ªÉm tra xem c√≥ b·ªã null kh√¥ng
        if (customer == null) {
            System.out.println("‚ùå Customer c·ªßa user b·ªã null");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User has no customer info");
        } else {
            System.out.println("‚úÖ Customer found: " + customer.getFullName());
        }

        CustomerResponse response = new CustomerResponse();
        response.setPhoneNumber(customer.getPhoneNumber());
        response.setEmail(customer.getEmail());
        response.setFullName(customer.getFullName());
        response.setCreatedAt(customer.getCreatedAt());

        List<String> roles = userDetails.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toList());
        response.setRoles(roles);

        System.out.println("‚úÖ Roles: " + roles);

        return ResponseEntity.ok(response);
    }




    // ƒëƒÉng k√≠ to√†n kho·∫£n
    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {
        try {
            // ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
            if (userRepository.existsByUsername(request.getUsername())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Username ƒë√£ t·ªìn t·∫°i");
            }
            // ki·ªÉm tra email
            if (customerRepository.existsByEmail(request.getEmail())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email ƒë∆∞·ª£c ƒëƒÉng k√≠");
            }
            // ki·ªÉm tra phoneNumber tr√πng
            if (customerRepository.existsById(request.getPhoneNumber())) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng");
            }

            // t·∫°o user
            UserEntity userEntity = new UserEntity();
            userEntity.setUsername(request.getUsername());
            userEntity.setPasswordHash(passwordEncoder.encode(request.getPasswordHashed()));
            userRepository.save(userEntity);

            // g√°n Role ROLE_CUSTOMER
            Role role = roleRepository.findByRoleName("ROLE_CUSTOMER")
                    .orElseThrow(() -> new BarberException("ROLE_CUSTOMER kh√¥ng t·ªìn t·∫°i"));
            UserRole userRole = new UserRole();
            userRole.setUser(userEntity);
            userRole.setRole(role);
            userRole.setId(new UserRoleId(null, role.getId()));
            userEntity.getRoles().add(userRole);
            userRepository.save(userEntity);

            // t·∫°o customer (email li√™n k·∫øt user)
            Customer customer = new Customer();
            customer.setPhoneNumber(request.getPhoneNumber());
            customer.setFullName("Kh√°ch h√†ng m·ªõi");
            customer.setEmail(request.getEmail());
            customer.setUser(userEntity);

            customerRepository.save(customer);

            return ResponseEntity.status(HttpStatus.CREATED).body("ƒêƒÉng k√≠ th√†nh c√¥ng");

        } catch (Exception e) {
            logger.error("ƒêƒÉng k√≠ l·ªói: ", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("ƒêƒÉng k√≠ th√¢t b·∫°i");
        }
    }


    // g·ª≠i mail ch∆∞a link reset
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestParam String email) {
        Optional<Customer> optionalCustomer = customerRepository.findByEmail(email);
        if (optionalCustomer.isEmpty()) {
            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng v·ªõi email: " + email);
        }

        // L·∫•y user t·ª´ customer
        UserEntity user = optionalCustomer.get().getUser();
        if (user == null) {
            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng t∆∞∆°ng ·ª©ng v·ªõi email n√†y");
        }

        String token = jwtUtils.generateResetPasswordToken(user.getUsername());
        // In log ƒë·ªÉ ki·ªÉm tra token
        System.out.println("Token reset t·∫°o ra: " + token);

        String link = "http://localhost:5173/auth/reset-password?token=" + token;

        emailService.sendEmail(email, "Kh√¥i ph·ª•c m·∫≠t kh·∫©u",
                "Vui l√≤ng click v√†o li√™n k·∫øt sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (c√≥ hi·ªáu l·ª±c trong 15 ph√∫t):\n <a href=\"" + link + "\">Click</a>");
        return ResponseEntity.ok("Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ g·ª≠i ƒë·∫øn email.");
    }

    // ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng (g·ªçi khi FE m·ªü form)
    @GetMapping("/check-reset-token")
    public ResponseEntity<?> checkResetToken(@RequestParam String token) {
        boolean valid = jwtUtils.validateToken(token);
        if (!valid) {
            return ResponseEntity.badRequest().body("Token h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }
        return ResponseEntity.ok("Token h·ª£p l·ªá");
    }

    // ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u g·ª≠i token + m·∫≠t kh·∫©u m·ªõi
    @PostMapping("/reset-password")
    public ResponseEntity<?> resetPassword
    (@RequestParam String token,
     @RequestBody ResetPasswordRequest request) {
        if (!jwtUtils.validateToken(token)) {
            return ResponseEntity.badRequest().body("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }
        String username = jwtUtils.getUsernameFromResetToken(token);
        Optional<UserEntity> optional = userRepository.findByUsername(username);
        if (optional.isEmpty()) {
            return ResponseEntity.badRequest().body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
        }

        UserEntity user = optional.get();
        user.setPasswordHash(passwordEncoder.encode(request.getNewPassword()));
        userRepository.save(user);
        System.out.println("Hash m·ªõi: " + passwordEncoder.encode(request.getNewPassword()));

        return ResponseEntity.ok("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng.");
    }
}
